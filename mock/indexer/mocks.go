// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/figment-networks/oasishub-indexer/indexer (interfaces: AccountAggCreatorTaskStore,BackfillSourceStore,BlockSeqCreatorTaskStore,SourceIndexStore,StakingSeqCreatorTaskStore,SyncerTaskStore,ValidatorAggCreatorTaskStore,ValidatorSeqCreatorTaskStore)

// Package mock_indexer is a generated GoMock package.
package mock_indexer

import (
	model "github.com/figment-networks/oasishub-indexer/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAccountAggCreatorTaskStore is a mock of AccountAggCreatorTaskStore interface
type MockAccountAggCreatorTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockAccountAggCreatorTaskStoreMockRecorder
}

// MockAccountAggCreatorTaskStoreMockRecorder is the mock recorder for MockAccountAggCreatorTaskStore
type MockAccountAggCreatorTaskStoreMockRecorder struct {
	mock *MockAccountAggCreatorTaskStore
}

// NewMockAccountAggCreatorTaskStore creates a new mock instance
func NewMockAccountAggCreatorTaskStore(ctrl *gomock.Controller) *MockAccountAggCreatorTaskStore {
	mock := &MockAccountAggCreatorTaskStore{ctrl: ctrl}
	mock.recorder = &MockAccountAggCreatorTaskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountAggCreatorTaskStore) EXPECT() *MockAccountAggCreatorTaskStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockAccountAggCreatorTaskStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockAccountAggCreatorTaskStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountAggCreatorTaskStore)(nil).Create), arg0)
}

// FindByPublicKey mocks base method
func (m *MockAccountAggCreatorTaskStore) FindByPublicKey(arg0 string) (*model.AccountAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPublicKey", arg0)
	ret0, _ := ret[0].(*model.AccountAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPublicKey indicates an expected call of FindByPublicKey
func (mr *MockAccountAggCreatorTaskStoreMockRecorder) FindByPublicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPublicKey", reflect.TypeOf((*MockAccountAggCreatorTaskStore)(nil).FindByPublicKey), arg0)
}

// Save mocks base method
func (m *MockAccountAggCreatorTaskStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockAccountAggCreatorTaskStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAccountAggCreatorTaskStore)(nil).Save), arg0)
}

// MockBackfillSourceStore is a mock of BackfillSourceStore interface
type MockBackfillSourceStore struct {
	ctrl     *gomock.Controller
	recorder *MockBackfillSourceStoreMockRecorder
}

// MockBackfillSourceStoreMockRecorder is the mock recorder for MockBackfillSourceStore
type MockBackfillSourceStoreMockRecorder struct {
	mock *MockBackfillSourceStore
}

// NewMockBackfillSourceStore creates a new mock instance
func NewMockBackfillSourceStore(ctrl *gomock.Controller) *MockBackfillSourceStore {
	mock := &MockBackfillSourceStore{ctrl: ctrl}
	mock.recorder = &MockBackfillSourceStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBackfillSourceStore) EXPECT() *MockBackfillSourceStoreMockRecorder {
	return m.recorder
}

// FindFirstByDifferentIndexVersion mocks base method
func (m *MockBackfillSourceStore) FindFirstByDifferentIndexVersion(arg0 int64) (*model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFirstByDifferentIndexVersion", arg0)
	ret0, _ := ret[0].(*model.Syncable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFirstByDifferentIndexVersion indicates an expected call of FindFirstByDifferentIndexVersion
func (mr *MockBackfillSourceStoreMockRecorder) FindFirstByDifferentIndexVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFirstByDifferentIndexVersion", reflect.TypeOf((*MockBackfillSourceStore)(nil).FindFirstByDifferentIndexVersion), arg0)
}

// FindMostRecentByDifferentIndexVersion mocks base method
func (m *MockBackfillSourceStore) FindMostRecentByDifferentIndexVersion(arg0 int64) (*model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecentByDifferentIndexVersion", arg0)
	ret0, _ := ret[0].(*model.Syncable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecentByDifferentIndexVersion indicates an expected call of FindMostRecentByDifferentIndexVersion
func (mr *MockBackfillSourceStoreMockRecorder) FindMostRecentByDifferentIndexVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecentByDifferentIndexVersion", reflect.TypeOf((*MockBackfillSourceStore)(nil).FindMostRecentByDifferentIndexVersion), arg0)
}

// MockBlockSeqCreatorTaskStore is a mock of BlockSeqCreatorTaskStore interface
type MockBlockSeqCreatorTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockBlockSeqCreatorTaskStoreMockRecorder
}

// MockBlockSeqCreatorTaskStoreMockRecorder is the mock recorder for MockBlockSeqCreatorTaskStore
type MockBlockSeqCreatorTaskStoreMockRecorder struct {
	mock *MockBlockSeqCreatorTaskStore
}

// NewMockBlockSeqCreatorTaskStore creates a new mock instance
func NewMockBlockSeqCreatorTaskStore(ctrl *gomock.Controller) *MockBlockSeqCreatorTaskStore {
	mock := &MockBlockSeqCreatorTaskStore{ctrl: ctrl}
	mock.recorder = &MockBlockSeqCreatorTaskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockSeqCreatorTaskStore) EXPECT() *MockBlockSeqCreatorTaskStoreMockRecorder {
	return m.recorder
}

// FindByHeight mocks base method
func (m *MockBlockSeqCreatorTaskStore) FindByHeight(arg0 int64) (*model.BlockSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].(*model.BlockSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeight indicates an expected call of FindByHeight
func (mr *MockBlockSeqCreatorTaskStoreMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockBlockSeqCreatorTaskStore)(nil).FindByHeight), arg0)
}

// MockSourceIndexStore is a mock of SourceIndexStore interface
type MockSourceIndexStore struct {
	ctrl     *gomock.Controller
	recorder *MockSourceIndexStoreMockRecorder
}

// MockSourceIndexStoreMockRecorder is the mock recorder for MockSourceIndexStore
type MockSourceIndexStoreMockRecorder struct {
	mock *MockSourceIndexStore
}

// NewMockSourceIndexStore creates a new mock instance
func NewMockSourceIndexStore(ctrl *gomock.Controller) *MockSourceIndexStore {
	mock := &MockSourceIndexStore{ctrl: ctrl}
	mock.recorder = &MockSourceIndexStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSourceIndexStore) EXPECT() *MockSourceIndexStoreMockRecorder {
	return m.recorder
}

// FindMostRecent mocks base method
func (m *MockSourceIndexStore) FindMostRecent() (*model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecent")
	ret0, _ := ret[0].(*model.Syncable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecent indicates an expected call of FindMostRecent
func (mr *MockSourceIndexStoreMockRecorder) FindMostRecent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecent", reflect.TypeOf((*MockSourceIndexStore)(nil).FindMostRecent))
}

// MockStakingSeqCreatorTaskStore is a mock of StakingSeqCreatorTaskStore interface
type MockStakingSeqCreatorTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockStakingSeqCreatorTaskStoreMockRecorder
}

// MockStakingSeqCreatorTaskStoreMockRecorder is the mock recorder for MockStakingSeqCreatorTaskStore
type MockStakingSeqCreatorTaskStoreMockRecorder struct {
	mock *MockStakingSeqCreatorTaskStore
}

// NewMockStakingSeqCreatorTaskStore creates a new mock instance
func NewMockStakingSeqCreatorTaskStore(ctrl *gomock.Controller) *MockStakingSeqCreatorTaskStore {
	mock := &MockStakingSeqCreatorTaskStore{ctrl: ctrl}
	mock.recorder = &MockStakingSeqCreatorTaskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStakingSeqCreatorTaskStore) EXPECT() *MockStakingSeqCreatorTaskStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockStakingSeqCreatorTaskStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockStakingSeqCreatorTaskStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStakingSeqCreatorTaskStore)(nil).Create), arg0)
}

// FindByHeight mocks base method
func (m *MockStakingSeqCreatorTaskStore) FindByHeight(arg0 int64) (*model.StakingSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].(*model.StakingSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeight indicates an expected call of FindByHeight
func (mr *MockStakingSeqCreatorTaskStoreMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockStakingSeqCreatorTaskStore)(nil).FindByHeight), arg0)
}

// MockSyncerTaskStore is a mock of SyncerTaskStore interface
type MockSyncerTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockSyncerTaskStoreMockRecorder
}

// MockSyncerTaskStoreMockRecorder is the mock recorder for MockSyncerTaskStore
type MockSyncerTaskStoreMockRecorder struct {
	mock *MockSyncerTaskStore
}

// NewMockSyncerTaskStore creates a new mock instance
func NewMockSyncerTaskStore(ctrl *gomock.Controller) *MockSyncerTaskStore {
	mock := &MockSyncerTaskStore{ctrl: ctrl}
	mock.recorder = &MockSyncerTaskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSyncerTaskStore) EXPECT() *MockSyncerTaskStoreMockRecorder {
	return m.recorder
}

// FindByHeight mocks base method
func (m *MockSyncerTaskStore) FindByHeight(arg0 int64) (*model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].(*model.Syncable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeight indicates an expected call of FindByHeight
func (mr *MockSyncerTaskStoreMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockSyncerTaskStore)(nil).FindByHeight), arg0)
}

// MockValidatorAggCreatorTaskStore is a mock of ValidatorAggCreatorTaskStore interface
type MockValidatorAggCreatorTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorAggCreatorTaskStoreMockRecorder
}

// MockValidatorAggCreatorTaskStoreMockRecorder is the mock recorder for MockValidatorAggCreatorTaskStore
type MockValidatorAggCreatorTaskStoreMockRecorder struct {
	mock *MockValidatorAggCreatorTaskStore
}

// NewMockValidatorAggCreatorTaskStore creates a new mock instance
func NewMockValidatorAggCreatorTaskStore(ctrl *gomock.Controller) *MockValidatorAggCreatorTaskStore {
	mock := &MockValidatorAggCreatorTaskStore{ctrl: ctrl}
	mock.recorder = &MockValidatorAggCreatorTaskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorAggCreatorTaskStore) EXPECT() *MockValidatorAggCreatorTaskStoreMockRecorder {
	return m.recorder
}

// FindByEntityUID mocks base method
func (m *MockValidatorAggCreatorTaskStore) FindByEntityUID(arg0 string) (*model.ValidatorAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEntityUID", arg0)
	ret0, _ := ret[0].(*model.ValidatorAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEntityUID indicates an expected call of FindByEntityUID
func (mr *MockValidatorAggCreatorTaskStoreMockRecorder) FindByEntityUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEntityUID", reflect.TypeOf((*MockValidatorAggCreatorTaskStore)(nil).FindByEntityUID), arg0)
}

// MockValidatorSeqCreatorTaskStore is a mock of ValidatorSeqCreatorTaskStore interface
type MockValidatorSeqCreatorTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorSeqCreatorTaskStoreMockRecorder
}

// MockValidatorSeqCreatorTaskStoreMockRecorder is the mock recorder for MockValidatorSeqCreatorTaskStore
type MockValidatorSeqCreatorTaskStoreMockRecorder struct {
	mock *MockValidatorSeqCreatorTaskStore
}

// NewMockValidatorSeqCreatorTaskStore creates a new mock instance
func NewMockValidatorSeqCreatorTaskStore(ctrl *gomock.Controller) *MockValidatorSeqCreatorTaskStore {
	mock := &MockValidatorSeqCreatorTaskStore{ctrl: ctrl}
	mock.recorder = &MockValidatorSeqCreatorTaskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorSeqCreatorTaskStore) EXPECT() *MockValidatorSeqCreatorTaskStoreMockRecorder {
	return m.recorder
}

// FindByHeightAndEntityUID mocks base method
func (m *MockValidatorSeqCreatorTaskStore) FindByHeightAndEntityUID(arg0 int64, arg1 string) (*model.ValidatorSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeightAndEntityUID", arg0, arg1)
	ret0, _ := ret[0].(*model.ValidatorSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeightAndEntityUID indicates an expected call of FindByHeightAndEntityUID
func (mr *MockValidatorSeqCreatorTaskStoreMockRecorder) FindByHeightAndEntityUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeightAndEntityUID", reflect.TypeOf((*MockValidatorSeqCreatorTaskStore)(nil).FindByHeightAndEntityUID), arg0, arg1)
}
