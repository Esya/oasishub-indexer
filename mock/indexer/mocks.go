// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/figment-networks/oasishub-indexer/indexer (interfaces: AccountAggCreatorTaskStore,SyncerTaskStore,ValidatorAggCreatorTaskStore)

// Package mock_indexer is a generated GoMock package.
package mock_indexer

import (
	model "github.com/figment-networks/oasishub-indexer/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAccountAggCreatorTaskStore is a mock of AccountAggCreatorTaskStore interface
type MockAccountAggCreatorTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockAccountAggCreatorTaskStoreMockRecorder
}

// MockAccountAggCreatorTaskStoreMockRecorder is the mock recorder for MockAccountAggCreatorTaskStore
type MockAccountAggCreatorTaskStoreMockRecorder struct {
	mock *MockAccountAggCreatorTaskStore
}

// NewMockAccountAggCreatorTaskStore creates a new mock instance
func NewMockAccountAggCreatorTaskStore(ctrl *gomock.Controller) *MockAccountAggCreatorTaskStore {
	mock := &MockAccountAggCreatorTaskStore{ctrl: ctrl}
	mock.recorder = &MockAccountAggCreatorTaskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountAggCreatorTaskStore) EXPECT() *MockAccountAggCreatorTaskStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockAccountAggCreatorTaskStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockAccountAggCreatorTaskStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountAggCreatorTaskStore)(nil).Create), arg0)
}

// FindByPublicKey mocks base method
func (m *MockAccountAggCreatorTaskStore) FindByPublicKey(arg0 string) (*model.AccountAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPublicKey", arg0)
	ret0, _ := ret[0].(*model.AccountAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPublicKey indicates an expected call of FindByPublicKey
func (mr *MockAccountAggCreatorTaskStoreMockRecorder) FindByPublicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPublicKey", reflect.TypeOf((*MockAccountAggCreatorTaskStore)(nil).FindByPublicKey), arg0)
}

// Save mocks base method
func (m *MockAccountAggCreatorTaskStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockAccountAggCreatorTaskStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAccountAggCreatorTaskStore)(nil).Save), arg0)
}

// MockSyncerTaskStore is a mock of SyncerTaskStore interface
type MockSyncerTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockSyncerTaskStoreMockRecorder
}

// MockSyncerTaskStoreMockRecorder is the mock recorder for MockSyncerTaskStore
type MockSyncerTaskStoreMockRecorder struct {
	mock *MockSyncerTaskStore
}

// NewMockSyncerTaskStore creates a new mock instance
func NewMockSyncerTaskStore(ctrl *gomock.Controller) *MockSyncerTaskStore {
	mock := &MockSyncerTaskStore{ctrl: ctrl}
	mock.recorder = &MockSyncerTaskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSyncerTaskStore) EXPECT() *MockSyncerTaskStoreMockRecorder {
	return m.recorder
}

// FindByHeight mocks base method
func (m *MockSyncerTaskStore) FindByHeight(arg0 int64) (*model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].(*model.Syncable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeight indicates an expected call of FindByHeight
func (mr *MockSyncerTaskStoreMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockSyncerTaskStore)(nil).FindByHeight), arg0)
}

// MockValidatorAggCreatorTaskStore is a mock of ValidatorAggCreatorTaskStore interface
type MockValidatorAggCreatorTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorAggCreatorTaskStoreMockRecorder
}

// MockValidatorAggCreatorTaskStoreMockRecorder is the mock recorder for MockValidatorAggCreatorTaskStore
type MockValidatorAggCreatorTaskStoreMockRecorder struct {
	mock *MockValidatorAggCreatorTaskStore
}

// NewMockValidatorAggCreatorTaskStore creates a new mock instance
func NewMockValidatorAggCreatorTaskStore(ctrl *gomock.Controller) *MockValidatorAggCreatorTaskStore {
	mock := &MockValidatorAggCreatorTaskStore{ctrl: ctrl}
	mock.recorder = &MockValidatorAggCreatorTaskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorAggCreatorTaskStore) EXPECT() *MockValidatorAggCreatorTaskStoreMockRecorder {
	return m.recorder
}

// FindByEntityUID mocks base method
func (m *MockValidatorAggCreatorTaskStore) FindByEntityUID(arg0 string) (*model.ValidatorAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEntityUID", arg0)
	ret0, _ := ret[0].(*model.ValidatorAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEntityUID indicates an expected call of FindByEntityUID
func (mr *MockValidatorAggCreatorTaskStoreMockRecorder) FindByEntityUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEntityUID", reflect.TypeOf((*MockValidatorAggCreatorTaskStore)(nil).FindByEntityUID), arg0)
}
