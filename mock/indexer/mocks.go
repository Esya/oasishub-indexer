// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/figment-networks/oasishub-indexer/indexer (interfaces: AccountAggCreatorTaskStore,BackfillSourceStore,BlockSeqCreatorTaskStore,BlockSeqPersistorTaskStore,ConfigParser,DebondingDelegationSeqCreatorTaskStore,DelegationSeqCreatorTaskStore,SourceIndexStore,StakingSeqCreatorTaskStore,SyncerPersistorTaskStore,SyncerTaskStore,SystemEventCreatorStore,TransactionSeqCreatorTaskStore,ValidatorAggCreatorTaskStore,ValidatorAggPersistorTaskStore,ValidatorSeqCreatorTaskStore,ValidatorSeqPersistorTaskStore)
// Source: github.com/figment-networks/oasishub-indexer/indexer (interfaces: ConfigParser,SystemEventCreatorStore)

// Package mock_indexer is a generated GoMock package.
package mock_indexer

import (
	pipeline "github.com/figment-networks/indexing-engine/pipeline"
	model "github.com/figment-networks/oasishub-indexer/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAccountAggCreatorTaskStore is a mock of AccountAggCreatorTaskStore interface
type MockAccountAggCreatorTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockAccountAggCreatorTaskStoreMockRecorder
}

// MockAccountAggCreatorTaskStoreMockRecorder is the mock recorder for MockAccountAggCreatorTaskStore
type MockAccountAggCreatorTaskStoreMockRecorder struct {
	mock *MockAccountAggCreatorTaskStore
}

// NewMockAccountAggCreatorTaskStore creates a new mock instance
func NewMockAccountAggCreatorTaskStore(ctrl *gomock.Controller) *MockAccountAggCreatorTaskStore {
	mock := &MockAccountAggCreatorTaskStore{ctrl: ctrl}
	mock.recorder = &MockAccountAggCreatorTaskStoreMockRecorder{mock}
// MockConfigParser is a mock of ConfigParser interface
type MockConfigParser struct {
	ctrl     *gomock.Controller
	recorder *MockConfigParserMockRecorder
}

// MockConfigParserMockRecorder is the mock recorder for MockConfigParser
type MockConfigParserMockRecorder struct {
	mock *MockConfigParser
}

// NewMockConfigParser creates a new mock instance
func NewMockConfigParser(ctrl *gomock.Controller) *MockConfigParser {
	mock := &MockConfigParser{ctrl: ctrl}
	mock.recorder = &MockConfigParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountAggCreatorTaskStore) EXPECT() *MockAccountAggCreatorTaskStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockAccountAggCreatorTaskStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockAccountAggCreatorTaskStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountAggCreatorTaskStore)(nil).Create), arg0)
}

// FindByPublicKey mocks base method
func (m *MockAccountAggCreatorTaskStore) FindByPublicKey(arg0 string) (*model.AccountAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPublicKey", arg0)
	ret0, _ := ret[0].(*model.AccountAgg)
func (m *MockConfigParser) EXPECT() *MockConfigParserMockRecorder {
	return m.recorder
}

// GetAllAvailableTasks mocks base method
func (m *MockConfigParser) GetAllAvailableTasks() []pipeline.TaskName {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAvailableTasks")
	ret0, _ := ret[0].([]pipeline.TaskName)
	return ret0
}

// GetAllAvailableTasks indicates an expected call of GetAllAvailableTasks
func (mr *MockConfigParserMockRecorder) GetAllAvailableTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAvailableTasks", reflect.TypeOf((*MockConfigParser)(nil).GetAllAvailableTasks))
}

// GetAllVersionedTasks mocks base method
func (m *MockConfigParser) GetAllVersionedTasks() ([]pipeline.TaskName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVersionedTasks")
	ret0, _ := ret[0].([]pipeline.TaskName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllVersionedTasks indicates an expected call of GetAllVersionedTasks
func (mr *MockConfigParserMockRecorder) GetAllVersionedTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVersionedTasks", reflect.TypeOf((*MockConfigParser)(nil).GetAllVersionedTasks))
}

// GetAllVersionedVersionIds mocks base method
func (m *MockConfigParser) GetAllVersionedVersionIds() []int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVersionedVersionIds")
	ret0, _ := ret[0].([]int64)
	return ret0
}

// GetAllVersionedVersionIds indicates an expected call of GetAllVersionedVersionIds
func (mr *MockConfigParserMockRecorder) GetAllVersionedVersionIds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVersionedVersionIds", reflect.TypeOf((*MockConfigParser)(nil).GetAllVersionedVersionIds))
}

// GetCurrentVersionId mocks base method
func (m *MockConfigParser) GetCurrentVersionId() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentVersionId")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetCurrentVersionId indicates an expected call of GetCurrentVersionId
func (mr *MockConfigParserMockRecorder) GetCurrentVersionId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentVersionId", reflect.TypeOf((*MockConfigParser)(nil).GetCurrentVersionId))
}

// GetTasksByTargetIds mocks base method
func (m *MockConfigParser) GetTasksByTargetIds(arg0 []int64) ([]pipeline.TaskName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksByTargetIds", arg0)
	ret0, _ := ret[0].([]pipeline.TaskName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecent indicates an expected call of FindMostRecent
func (mr *MockSourceIndexStoreMockRecorder) FindMostRecent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecent", reflect.TypeOf((*MockSourceIndexStore)(nil).FindMostRecent))
}

// MockStakingSeqCreatorTaskStore is a mock of StakingSeqCreatorTaskStore interface
type MockStakingSeqCreatorTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockStakingSeqCreatorTaskStoreMockRecorder
}

// MockStakingSeqCreatorTaskStoreMockRecorder is the mock recorder for MockStakingSeqCreatorTaskStore
type MockStakingSeqCreatorTaskStoreMockRecorder struct {
	mock *MockStakingSeqCreatorTaskStore
}

// NewMockStakingSeqCreatorTaskStore creates a new mock instance
func NewMockStakingSeqCreatorTaskStore(ctrl *gomock.Controller) *MockStakingSeqCreatorTaskStore {
	mock := &MockStakingSeqCreatorTaskStore{ctrl: ctrl}
	mock.recorder = &MockStakingSeqCreatorTaskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStakingSeqCreatorTaskStore) EXPECT() *MockStakingSeqCreatorTaskStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockStakingSeqCreatorTaskStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockStakingSeqCreatorTaskStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStakingSeqCreatorTaskStore)(nil).Create), arg0)
}

// FindByHeight mocks base method
func (m *MockStakingSeqCreatorTaskStore) FindByHeight(arg0 int64) (*model.StakingSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].(*model.StakingSeq)
// GetTasksByTargetIds indicates an expected call of GetTasksByTargetIds
func (mr *MockConfigParserMockRecorder) GetTasksByTargetIds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksByTargetIds", reflect.TypeOf((*MockConfigParser)(nil).GetTasksByTargetIds), arg0)
}

// GetTasksByVersionIds mocks base method
func (m *MockConfigParser) GetTasksByVersionIds(arg0 []int64) ([]pipeline.TaskName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksByVersionIds", arg0)
	ret0, _ := ret[0].([]pipeline.TaskName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeight indicates an expected call of FindByHeight
func (mr *MockStakingSeqCreatorTaskStoreMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockStakingSeqCreatorTaskStore)(nil).FindByHeight), arg0)
}

// MockSyncerPersistorTaskStore is a mock of SyncerPersistorTaskStore interface
type MockSyncerPersistorTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockSyncerPersistorTaskStoreMockRecorder
}

// MockSyncerPersistorTaskStoreMockRecorder is the mock recorder for MockSyncerPersistorTaskStore
type MockSyncerPersistorTaskStoreMockRecorder struct {
	mock *MockSyncerPersistorTaskStore
}

// NewMockSyncerPersistorTaskStore creates a new mock instance
func NewMockSyncerPersistorTaskStore(ctrl *gomock.Controller) *MockSyncerPersistorTaskStore {
	mock := &MockSyncerPersistorTaskStore{ctrl: ctrl}
	mock.recorder = &MockSyncerPersistorTaskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSyncerPersistorTaskStore) EXPECT() *MockSyncerPersistorTaskStoreMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockSyncerPersistorTaskStore) CreateOrUpdate(arg0 *model.Syncable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockSyncerPersistorTaskStoreMockRecorder) CreateOrUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockSyncerPersistorTaskStore)(nil).CreateOrUpdate), arg0)
}

// MockSyncerTaskStore is a mock of SyncerTaskStore interface
type MockSyncerTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockSyncerTaskStoreMockRecorder
}

// MockSyncerTaskStoreMockRecorder is the mock recorder for MockSyncerTaskStore
type MockSyncerTaskStoreMockRecorder struct {
	mock *MockSyncerTaskStore
}

// NewMockSyncerTaskStore creates a new mock instance
func NewMockSyncerTaskStore(ctrl *gomock.Controller) *MockSyncerTaskStore {
	mock := &MockSyncerTaskStore{ctrl: ctrl}
	mock.recorder = &MockSyncerTaskStoreMockRecorder{mock}
// GetTasksByVersionIds indicates an expected call of GetTasksByVersionIds
func (mr *MockConfigParserMockRecorder) GetTasksByVersionIds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksByVersionIds", reflect.TypeOf((*MockConfigParser)(nil).GetTasksByVersionIds), arg0)
}

// IsAnyVersionSequential mocks base method
func (m *MockConfigParser) IsAnyVersionSequential(arg0 []int64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAnyVersionSequential", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAnyVersionSequential indicates an expected call of IsAnyVersionSequential
func (mr *MockConfigParserMockRecorder) IsAnyVersionSequential(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAnyVersionSequential", reflect.TypeOf((*MockConfigParser)(nil).IsAnyVersionSequential), arg0)
}

// MockSystemEventCreatorStore is a mock of SystemEventCreatorStore interface
type MockSystemEventCreatorStore struct {
	ctrl     *gomock.Controller
	recorder *MockSystemEventCreatorStoreMockRecorder
}

// MockSystemEventCreatorStoreMockRecorder is the mock recorder for MockSystemEventCreatorStore
type MockSystemEventCreatorStoreMockRecorder struct {
	mock *MockSystemEventCreatorStore
}

// NewMockSystemEventCreatorStore creates a new mock instance
func NewMockSystemEventCreatorStore(ctrl *gomock.Controller) *MockSystemEventCreatorStore {
	mock := &MockSystemEventCreatorStore{ctrl: ctrl}
	mock.recorder = &MockSystemEventCreatorStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSyncerTaskStore) EXPECT() *MockSyncerTaskStoreMockRecorder {
func (m *MockSystemEventCreatorStore) EXPECT() *MockSystemEventCreatorStoreMockRecorder {
	return m.recorder
}

// FindByHeight mocks base method
func (m *MockSyncerTaskStore) FindByHeight(arg0 int64) (*model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].(*model.Syncable)
func (m *MockSystemEventCreatorStore) FindByHeight(arg0 int64) ([]model.ValidatorSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].([]model.ValidatorSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeight indicates an expected call of FindByHeight
func (mr *MockSyncerTaskStoreMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockSyncerTaskStore)(nil).FindByHeight), arg0)
}

// MockTransactionSeqCreatorTaskStore is a mock of TransactionSeqCreatorTaskStore interface
type MockTransactionSeqCreatorTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionSeqCreatorTaskStoreMockRecorder
}

// MockTransactionSeqCreatorTaskStoreMockRecorder is the mock recorder for MockTransactionSeqCreatorTaskStore
type MockTransactionSeqCreatorTaskStoreMockRecorder struct {
	mock *MockTransactionSeqCreatorTaskStore
}

// NewMockTransactionSeqCreatorTaskStore creates a new mock instance
func NewMockTransactionSeqCreatorTaskStore(ctrl *gomock.Controller) *MockTransactionSeqCreatorTaskStore {
	mock := &MockTransactionSeqCreatorTaskStore{ctrl: ctrl}
	mock.recorder = &MockTransactionSeqCreatorTaskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransactionSeqCreatorTaskStore) EXPECT() *MockTransactionSeqCreatorTaskStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockTransactionSeqCreatorTaskStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockTransactionSeqCreatorTaskStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransactionSeqCreatorTaskStore)(nil).Create), arg0)
}

// FindByHeight mocks base method
func (m *MockTransactionSeqCreatorTaskStore) FindByHeight(arg0 int64) ([]model.TransactionSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].([]model.TransactionSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeight indicates an expected call of FindByHeight
func (mr *MockTransactionSeqCreatorTaskStoreMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockTransactionSeqCreatorTaskStore)(nil).FindByHeight), arg0)
}

// MockValidatorAggCreatorTaskStore is a mock of ValidatorAggCreatorTaskStore interface
type MockValidatorAggCreatorTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorAggCreatorTaskStoreMockRecorder
}

// MockValidatorAggCreatorTaskStoreMockRecorder is the mock recorder for MockValidatorAggCreatorTaskStore
type MockValidatorAggCreatorTaskStoreMockRecorder struct {
	mock *MockValidatorAggCreatorTaskStore
}

// NewMockValidatorAggCreatorTaskStore creates a new mock instance
func NewMockValidatorAggCreatorTaskStore(ctrl *gomock.Controller) *MockValidatorAggCreatorTaskStore {
	mock := &MockValidatorAggCreatorTaskStore{ctrl: ctrl}
	mock.recorder = &MockValidatorAggCreatorTaskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorAggCreatorTaskStore) EXPECT() *MockValidatorAggCreatorTaskStoreMockRecorder {
	return m.recorder
}

// FindByEntityUID mocks base method
func (m *MockValidatorAggCreatorTaskStore) FindByEntityUID(arg0 string) (*model.ValidatorAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEntityUID", arg0)
	ret0, _ := ret[0].(*model.ValidatorAgg)
func (mr *MockSystemEventCreatorStoreMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockSystemEventCreatorStore)(nil).FindByHeight), arg0)
}

// FindLastByAddress mocks base method
func (m *MockSystemEventCreatorStore) FindLastByAddress(arg0 string, arg1 int64) ([]model.ValidatorSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastByAddress", arg0, arg1)
	ret0, _ := ret[0].([]model.ValidatorSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEntityUID indicates an expected call of FindByEntityUID
func (mr *MockValidatorAggCreatorTaskStoreMockRecorder) FindByEntityUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEntityUID", reflect.TypeOf((*MockValidatorAggCreatorTaskStore)(nil).FindByEntityUID), arg0)
}

// MockValidatorAggPersistorTaskStore is a mock of ValidatorAggPersistorTaskStore interface
type MockValidatorAggPersistorTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorAggPersistorTaskStoreMockRecorder
}

// MockValidatorAggPersistorTaskStoreMockRecorder is the mock recorder for MockValidatorAggPersistorTaskStore
type MockValidatorAggPersistorTaskStoreMockRecorder struct {
	mock *MockValidatorAggPersistorTaskStore
}

// NewMockValidatorAggPersistorTaskStore creates a new mock instance
func NewMockValidatorAggPersistorTaskStore(ctrl *gomock.Controller) *MockValidatorAggPersistorTaskStore {
	mock := &MockValidatorAggPersistorTaskStore{ctrl: ctrl}
	mock.recorder = &MockValidatorAggPersistorTaskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorAggPersistorTaskStore) EXPECT() *MockValidatorAggPersistorTaskStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockValidatorAggPersistorTaskStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockValidatorAggPersistorTaskStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockValidatorAggPersistorTaskStore)(nil).Create), arg0)
}

// Save mocks base method
func (m *MockValidatorAggPersistorTaskStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockValidatorAggPersistorTaskStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockValidatorAggPersistorTaskStore)(nil).Save), arg0)
}

// MockValidatorSeqCreatorTaskStore is a mock of ValidatorSeqCreatorTaskStore interface
type MockValidatorSeqCreatorTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorSeqCreatorTaskStoreMockRecorder
}

// MockValidatorSeqCreatorTaskStoreMockRecorder is the mock recorder for MockValidatorSeqCreatorTaskStore
type MockValidatorSeqCreatorTaskStoreMockRecorder struct {
	mock *MockValidatorSeqCreatorTaskStore
}

// NewMockValidatorSeqCreatorTaskStore creates a new mock instance
func NewMockValidatorSeqCreatorTaskStore(ctrl *gomock.Controller) *MockValidatorSeqCreatorTaskStore {
	mock := &MockValidatorSeqCreatorTaskStore{ctrl: ctrl}
	mock.recorder = &MockValidatorSeqCreatorTaskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorSeqCreatorTaskStore) EXPECT() *MockValidatorSeqCreatorTaskStoreMockRecorder {
	return m.recorder
}

// FindByHeightAndEntityUID mocks base method
func (m *MockValidatorSeqCreatorTaskStore) FindByHeightAndEntityUID(arg0 int64, arg1 string) (*model.ValidatorSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeightAndEntityUID", arg0, arg1)
	ret0, _ := ret[0].(*model.ValidatorSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeightAndEntityUID indicates an expected call of FindByHeightAndEntityUID
func (mr *MockValidatorSeqCreatorTaskStoreMockRecorder) FindByHeightAndEntityUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeightAndEntityUID", reflect.TypeOf((*MockValidatorSeqCreatorTaskStore)(nil).FindByHeightAndEntityUID), arg0, arg1)
}

// MockValidatorSeqPersistorTaskStore is a mock of ValidatorSeqPersistorTaskStore interface
type MockValidatorSeqPersistorTaskStore struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorSeqPersistorTaskStoreMockRecorder
}

// MockValidatorSeqPersistorTaskStoreMockRecorder is the mock recorder for MockValidatorSeqPersistorTaskStore
type MockValidatorSeqPersistorTaskStoreMockRecorder struct {
	mock *MockValidatorSeqPersistorTaskStore
}

// NewMockValidatorSeqPersistorTaskStore creates a new mock instance
func NewMockValidatorSeqPersistorTaskStore(ctrl *gomock.Controller) *MockValidatorSeqPersistorTaskStore {
	mock := &MockValidatorSeqPersistorTaskStore{ctrl: ctrl}
	mock.recorder = &MockValidatorSeqPersistorTaskStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorSeqPersistorTaskStore) EXPECT() *MockValidatorSeqPersistorTaskStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockValidatorSeqPersistorTaskStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockValidatorSeqPersistorTaskStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockValidatorSeqPersistorTaskStore)(nil).Create), arg0)
}

// Save mocks base method
func (m *MockValidatorSeqPersistorTaskStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockValidatorSeqPersistorTaskStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockValidatorSeqPersistorTaskStore)(nil).Save), arg0)
// FindLastByAddress indicates an expected call of FindLastByAddress
func (mr *MockSystemEventCreatorStoreMockRecorder) FindLastByAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastByAddress", reflect.TypeOf((*MockSystemEventCreatorStore)(nil).FindLastByAddress), arg0, arg1)
}
