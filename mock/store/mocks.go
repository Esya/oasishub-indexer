// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/figment-networks/oasishub-indexer/store (interfaces: ValidatorSeqStore,SystemEventsStore)

// Package mock_store is a generated GoMock package.
package mock_store

import (
	model "github.com/figment-networks/oasishub-indexer/model"
	store "github.com/figment-networks/oasishub-indexer/store"
	types "github.com/figment-networks/oasishub-indexer/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockValidatorSeqStore is a mock of ValidatorSeqStore interface
type MockValidatorSeqStore struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorSeqStoreMockRecorder
}

// MockValidatorSeqStoreMockRecorder is the mock recorder for MockValidatorSeqStore
type MockValidatorSeqStoreMockRecorder struct {
	mock *MockValidatorSeqStore
}

// NewMockValidatorSeqStore creates a new mock instance
func NewMockValidatorSeqStore(ctrl *gomock.Controller) *MockValidatorSeqStore {
	mock := &MockValidatorSeqStore{ctrl: ctrl}
	mock.recorder = &MockValidatorSeqStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorSeqStore) EXPECT() *MockValidatorSeqStoreMockRecorder {
	return m.recorder
}

// DeleteOlderThan mocks base method
func (m *MockValidatorSeqStore) DeleteOlderThan(arg0 time.Time) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOlderThan", arg0)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOlderThan indicates an expected call of DeleteOlderThan
func (mr *MockValidatorSeqStoreMockRecorder) DeleteOlderThan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOlderThan", reflect.TypeOf((*MockValidatorSeqStore)(nil).DeleteOlderThan), arg0)
}

// FindByHeight mocks base method
func (m *MockValidatorSeqStore) FindByHeight(arg0 int64) ([]model.ValidatorSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].([]model.ValidatorSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeight indicates an expected call of FindByHeight
func (mr *MockValidatorSeqStoreMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockValidatorSeqStore)(nil).FindByHeight), arg0)
}

// FindByHeightAndEntityUID mocks base method
func (m *MockValidatorSeqStore) FindByHeightAndEntityUID(arg0 int64, arg1 string) (*model.ValidatorSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeightAndEntityUID", arg0, arg1)
	ret0, _ := ret[0].(*model.ValidatorSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeightAndEntityUID indicates an expected call of FindByHeightAndEntityUID
func (mr *MockValidatorSeqStoreMockRecorder) FindByHeightAndEntityUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeightAndEntityUID", reflect.TypeOf((*MockValidatorSeqStore)(nil).FindByHeightAndEntityUID), arg0, arg1)
}

// FindLastByAddress mocks base method
func (m *MockValidatorSeqStore) FindLastByAddress(arg0 string, arg1 int64) ([]model.ValidatorSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastByAddress", arg0, arg1)
	ret0, _ := ret[0].([]model.ValidatorSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastByAddress indicates an expected call of FindLastByAddress
func (mr *MockValidatorSeqStoreMockRecorder) FindLastByAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastByAddress", reflect.TypeOf((*MockValidatorSeqStore)(nil).FindLastByAddress), arg0, arg1)
}

// FindMostRecent mocks base method
func (m *MockValidatorSeqStore) FindMostRecent() (*model.ValidatorSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecent")
	ret0, _ := ret[0].(*model.ValidatorSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecent indicates an expected call of FindMostRecent
func (mr *MockValidatorSeqStoreMockRecorder) FindMostRecent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecent", reflect.TypeOf((*MockValidatorSeqStore)(nil).FindMostRecent))
}

// Summarize mocks base method
func (m *MockValidatorSeqStore) Summarize(arg0 types.SummaryInterval, arg1 []store.ActivityPeriodRow) ([]store.ValidatorSeqSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Summarize", arg0, arg1)
	ret0, _ := ret[0].([]store.ValidatorSeqSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Summarize indicates an expected call of Summarize
func (mr *MockValidatorSeqStoreMockRecorder) Summarize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Summarize", reflect.TypeOf((*MockValidatorSeqStore)(nil).Summarize), arg0, arg1)
}

// MockSystemEventsStore is a mock of SystemEventsStore interface
type MockSystemEventsStore struct {
	ctrl     *gomock.Controller
	recorder *MockSystemEventsStoreMockRecorder
}

// MockSystemEventsStoreMockRecorder is the mock recorder for MockSystemEventsStore
type MockSystemEventsStoreMockRecorder struct {
	mock *MockSystemEventsStore
}

// NewMockSystemEventsStore creates a new mock instance
func NewMockSystemEventsStore(ctrl *gomock.Controller) *MockSystemEventsStore {
	mock := &MockSystemEventsStore{ctrl: ctrl}
	mock.recorder = &MockSystemEventsStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSystemEventsStore) EXPECT() *MockSystemEventsStoreMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockSystemEventsStore) CreateOrUpdate(arg0 *model.SystemEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockSystemEventsStoreMockRecorder) CreateOrUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockSystemEventsStore)(nil).CreateOrUpdate), arg0)
}

// FindByActor mocks base method
func (m *MockSystemEventsStore) FindByActor(arg0 string, arg1 store.FindSystemEventByActorQuery) ([]model.SystemEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActor", arg0, arg1)
	ret0, _ := ret[0].([]model.SystemEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByActor indicates an expected call of FindByActor
func (mr *MockSystemEventsStoreMockRecorder) FindByActor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActor", reflect.TypeOf((*MockSystemEventsStore)(nil).FindByActor), arg0, arg1)
}

// FindByHeight mocks base method
func (m *MockSystemEventsStore) FindByHeight(arg0 int64) ([]model.SystemEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].([]model.SystemEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeight indicates an expected call of FindByHeight
func (mr *MockSystemEventsStoreMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockSystemEventsStore)(nil).FindByHeight), arg0)
}

// FindUnique mocks base method
func (m *MockSystemEventsStore) FindUnique(arg0 int64, arg1 string, arg2 model.SystemEventKind) (*model.SystemEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUnique", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.SystemEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUnique indicates an expected call of FindUnique
func (mr *MockSystemEventsStoreMockRecorder) FindUnique(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUnique", reflect.TypeOf((*MockSystemEventsStore)(nil).FindUnique), arg0, arg1, arg2)
}
